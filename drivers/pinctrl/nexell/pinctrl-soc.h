/* External GPIO and wakeup interrupt related definitions */
#define SOC_GPIO_ECON_OFFSET		0x700
#define SOC_GPIO_EFLTCON_OFFSET	0x800
#define SOC_GPIO_EMASK_OFFSET	0x900
#define SOC_GPIO_EPEND_OFFSET	0xA00
#define SOC_WKUP_ECON_OFFSET		0xE00
#define SOC_WKUP_EMASK_OFFSET	0xF00
#define SOC_WKUP_EPEND_OFFSET	0xF40
#define SOC_SVC_OFFSET		0xB08
#define SOC_EINT_FUNC		0xF

/* helpers to access interrupt service register */
#define SOC_SVC_GROUP_SHIFT		3
#define SOC_SVC_GROUP_MASK		0x1f
#define SOC_SVC_NUM_MASK		7
#define SOC_SVC_GROUP(x)		((x >> SOC_SVC_GROUP_SHIFT) & \
						SOC_SVC_GROUP_MASK)

/* SOC specific external interrupt trigger types */
#define SOC_EINT_LEVEL_LOW		0
#define SOC_EINT_LEVEL_HIGH		1
#define SOC_EINT_EDGE_FALLING	2
#define SOC_EINT_EDGE_RISING		3
#define SOC_EINT_EDGE_BOTH		4
#define SOC_EINT_CON_MASK		0xF
#define SOC_EINT_CON_LEN		4

#define SOC_EINT_MAX_PER_BANK	8
#define SOC_EINT_NR_WKUP_EINT

#define SOC_PIN_BANK_EINTN(pins, reg, id)		\
	{						\
	/*	.type		= &bank_type_off,*/	\
		.pctl_offset	= reg,			\
		.nr_pins	= pins,			\
		.eint_type	= EINT_TYPE_NONE,	\
		.name		= id			\
	}

#define SOC_PIN_BANK_EINTG(pins, reg, id, offs)	\
	{						\
	/*	.type		= &bank_type_off,*/	\
		.pctl_offset	= reg,			\
		.nr_pins	= pins,			\
		.eint_type	= EINT_TYPE_GPIO,	\
		.eint_offset	= offs,			\
		.name		= id			\
	}

#define SOC_PIN_BANK_EINTW(pins, reg, id, offs)	\
	{						\
	/*	.type		= &bank_type_alive,*/	\
		.pctl_offset	= reg,			\
		.nr_pins	= pins,			\
		.eint_type	= EINT_TYPE_WKUP,	\
		.eint_offset	= offs,			\
		.name		= id			\
	}

/**
 * struct soc_weint_data: irq specific data for all the wakeup interrupts
 * generated by the external wakeup interrupt controller.
 * @irq: interrupt number within the domain.
 * @bank: bank responsible for this interrupt
 */
struct soc_weint_data {
	unsigned int irq;
	struct nexell_pin_bank *bank;
};

/**
 * struct soc_muxed_weint_data: irq specific data for muxed wakeup interrupts
 * generated by the external wakeup interrupt controller.
 * @nr_banks: count of banks being part of the mux
 * @banks: array of banks being part of the mux
 */
struct soc_muxed_weint_data {
	unsigned int nr_banks;
	struct nexell_pin_bank *banks[];
};
